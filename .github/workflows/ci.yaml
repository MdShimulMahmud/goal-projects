name: Build CI with GitHub Actions

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      approval: ${{ steps.check.outputs.approval }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run Approval Action
      uses: ekeel/approval-action@v1.0.3
      id: approval
      with:
          # A GitHub token with repo scope.
          # The default secrets.GITHUB_TOKEN does not work with octokit to open/update/close issues.
          token: ${{ secrets.GH_TOKEN }}

          # A comma separated list of GitHub usernames that are allowed to approve.
          # Example: 'ekeel,octocat'
          approvers: 'MdShimulMahmud'

          # The number of approvals/rejections required to continue the workflow.
          minimumApprovals: '1'

          # The title of the issue to create.
          issueTitle: 'Test issue title'

          # The body of the issue to create.
          issueBody: 'Test issue body'

          # A comma separated list of labels to add to the issue.
          issueLabels: 'ManualApproval,ApprovalAction'

          # Exclude the workflow initiator from the list of approvers.
          excludeInitiator: 'false'

          # A comma separated list of words that will be used to approve.
          approveWords: 'approve, approved'

          # A comma separated list of words that will be used to reject.
          rejectWords: 'deny, denied, reject, rejected'

          # The number of minutes to wait between checks for approvals.
          waitInterval: '1'

          # The number of minutes to wait before timing out.
          waitTimeout: '5'
    - name: Get the output
      run: |
        echo "Approved: ${{ steps.approval.outputs.approved }}"
        echo "approval=${{steps.approval.outputs.approved}}" >> $GITHUB_ENV


  backend:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./backend
          npm install

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Check current version
        id: check
        run: |
          current_version=$(cat VERSION)
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "::set-output name=current_version::$current_version"

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./frontend
          npm install
          npm run build

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Check current version
        id: check
        run: |
          current_version=$(cat VERSION)
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "::set-output name=current_version::$current_version"

  version_check:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    outputs:
      current_version: ${{ needs.frontend.outputs.current_version }}
      previous_version: ${{ steps.get_previous_version.outputs.previous_version }}
      version_diff: ${{ steps.version_diff.outputs.version_diff }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract current version
        id: get_current_version
        run: echo "current_version=${{ needs.frontend.outputs.current_version }}" >> $GITHUB_ENV

      - name: Read previous version from deployment.yaml
        id: get_previous_version
        run: |
          previous_version=$(grep -oP 'shimulmahmud/(frontend|backend):v[0-9]+\.[0-9]+\.[0-9]+' k8s/deployment.yaml | grep -oP 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "previous_version=$previous_version" >> $GITHUB_ENV
          echo "::set-output name=previous_version::$previous_version"

      - name: Check if current version differs from previous
        id: version_diff
        run: |
          if [ "${{ env.current_version }}" != "${{ steps.get_previous_version.outputs.previous_version }}" ]; then
            echo "version_diff=true" >> $GITHUB_ENV
            echo "::set-output name=version_diff::true"
          else
            echo "version_diff=false" >> $GITHUB_ENV
            echo "::set-output name=version_diff::false"
          fi

  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend, version_check]
    if: ${{ needs.version_check.outputs.version_diff == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend:${{ needs.version_check.outputs.current_version }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backend:${{ needs.version_check.outputs.current_version }}

  
  tags:
    runs-on: ubuntu-latest
    needs: [docker,version_check]
    if: ${{ needs.version_check.outputs.version_diff == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set the new image version
        run: |
          echo "NEW_VERSION=${{ needs.version_check.outputs.current_version }}" >> $GITHUB_ENV

      - name: Update Kubernetes deployment.yaml image tags
        run: |
          sed -i 's|shimulmahmud/frontend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/frontend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml
          sed -i 's|shimulmahmud/backend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/backend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add k8s/deployment.yaml
          git commit -m "Update Kubernetes deployment image tags"
          git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/MdShimulMahmud/goal-projects.git
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

