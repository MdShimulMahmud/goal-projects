name: Build CI with GitHub Actions

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'

jobs:
  backend:
    runs-on: ubuntu-latest

    # get current version from VERSION file
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./backend
          npm install

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      
      # set current version to the github environment's output
      - name: Check current version
        id: check
        run: |
          current_version=$(cat VERSION)
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "::set-output name=current_version::$current_version"

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./frontend
          npm install
          npm run build

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Check current version
        id: check
        run: |

          # cat current version from VERSION file and set it to git env
          current_version=$(cat VERSION)
          echo "current_version=$current_version" >> $GITHUB_ENV
          echo "::set-output name=current_version::$current_version"

  # Compare previous version to current version 
  version_check:
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    outputs:
      # get current version from previous steps
      current_version: ${{ needs.frontend.outputs.current_version }}

      # get previous version from k8s/deployment.yaml files image tags
      previous_version: ${{ steps.get_previous_version.outputs.previous_version }}

      # set version difference to the variable version_diff
      version_diff: ${{ steps.version_diff.outputs.version_diff }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract current version
        id: get_current_version
        run: echo "current_version=${{ needs.frontend.outputs.current_version }}" >> $GITHUB_ENV

      - name: Read previous version from deployment.yaml
        id: get_previous_version
        run: |

          # Extract previous version from deployment.yaml file and set it to previous_version variable
          previous_version=$(grep -oP 'shimulmahmud/(frontend|backend):v[0-9]+\.[0-9]+\.[0-9]+' k8s/deployment.yaml | grep -oP 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "previous_version=$previous_version" >> $GITHUB_ENV
          echo "::set-output name=previous_version::$previous_version"

      - name: Check if current version differs from previous
        id: version_diff
        run: |
          if [ "${{ env.current_version }}" != "${{ steps.get_previous_version.outputs.previous_version }}" ]; then
            echo "version_diff=true" >> $GITHUB_ENV
            echo "::set-output name=version_diff::true"
          else
            echo "version_diff=false" >> $GITHUB_ENV
            echo "::set-output name=version_diff::false"
          fi

  docker:
    runs-on: ubuntu-latest
    needs: [version_check]
    # if the version is different, then it will be run.
    if: ${{ needs.version_check.outputs.version_diff == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build frontend image from dockerfile and push the image to docker hub registry
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend:${{ needs.version_check.outputs.current_version }}

      # Build frontend image from dockerfile and push the image to docker hub registry
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backend:${{ needs.version_check.outputs.current_version }}

  tags:
    runs-on: ubuntu-latest
    needs: [version_check]
    if: ${{ needs.version_check.outputs.version_diff == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set the new image version
        run: |
          echo "NEW_VERSION=${{ needs.version_check.outputs.current_version }}" >> $GITHUB_ENV

      - name: Update Kubernetes deployment.yaml image tags

        # Update image tags to deployment file
        run: |
          sed -i 's|shimulmahmud/frontend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/frontend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml
          sed -i 's|shimulmahmud/backend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/backend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml

        # commit image updated image tags
      - name: Commit and push changes to deployment.yaml
        uses: EndBug/add-and-commit@v7
        with:
          author_name: "${{ github.actor }}"
          author_email: "${{ github.actor }}@users.noreply.github.com"
          message: "Update Kubernetes deployment image tags to version ${{ env.NEW_VERSION }}"
        if: success() && github.event_name != 'push' && github.actor != 'github-actions[bot]'
