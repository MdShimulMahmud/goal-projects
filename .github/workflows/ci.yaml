name: Build CI with GitHub Actions

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'k8s/deployment.yaml'

jobs:
  backend:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./backend
          npm install

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Check current version
        id: check
        run: |
          # Read the current version from the VERSION file
          current_version=$(cat VERSION)
          echo "Current version: $current_version"

          # Set the current_version as an output
          echo "::set-output name=current_version::$current_version"

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    outputs:
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      - name: Install dependencies
        run: |
          cd ./frontend
          npm install
          npm run build

      - name: Debug Run Number
        run: echo "Current Run Number = ${{ github.run_number }}"

      - name: Check current version
        id: check
        run: |
          # Read the current version from the VERSION file
          current_version=$(cat VERSION)
          echo "Current version: $current_version"

          # Set the current_version as an output
          echo "::set-output name=current_version::$current_version"

  docker:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend:${{ needs.backend.outputs.current_version }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backend:${{ needs.backend.outputs.current_version }}

  tags:
  runs-on: ubuntu-latest
  needs: [frontend, backend, docker]
  if: github.event_name != 'push' || github.actor != 'github-actions[bot]'  # Avoid triggering on workflow changes
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set the new image version
      run: |
        echo "NEW_VERSION=${{ env.current_version }}" >> $GITHUB_ENV

    - name: Update Kubernetes deployment.yaml image tags
      run: |
        # Replace the frontend image tag if necessary
        sed -i 's|shimulmahmud/frontend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/frontend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml

        # Replace the backend image tag if necessary
        sed -i 's|shimulmahmud/backend:v[0-9]*\.[0-9]*\.[0-9]*|shimulmahmud/backend:${{ env.NEW_VERSION }}|' k8s/deployment.yaml

    - name: Check if deployment.yaml was updated
      run: |
        # Check if the deployment.yaml file was modified (e.g., tags were updated)
        git diff --exit-code k8s/deployment.yaml || echo "deployment.yaml updated"

    - name: Commit and push changes to deployment.yaml
      uses: EndBug/add-and-commit@v7
      with:
        author_name: "${{ github.actor }}"  # Dynamic author name
        author_email: "${{ github.actor }}@users.noreply.github.com"  # Dynamic email
        message: "Update Kubernetes deployment image tags to version ${{ env.NEW_VERSION }}"
      # This step is conditional on the previous step indicating changes
      if: success() && github.event_name != 'push' && github.actor != 'github-actions[bot]'
